from ..FSA.FSA import *

"""
This file tests FSA constructions, i.e.
- Unions
- Concatenations (note that this won't play nice with synchronous multi-tape FSAs)
- Intersections
- Kleene stars
- Products
- Projections
- FSAs accepting a single given word
- Complements
- Breadth-first-search normal forms for FSAs
- Quotients
- Strict quotients (in the sense of )
- Substitutions
- Inverse homomorphisms
- Reversing FSAs (note that this won't play nice with synchronous multi-tape FSAs)
- Concatenation of a synchronous multi-tape FSA with a single word (this *does* work)
- FSA accepting the synchronous language {(uw, vw) | w in A*} for specific u, v
"""

# Randomly generated FSAs to used for testing
f = FSA(3, {0, 1}, ('a', 'b', 'c'), {'a': [0, 0, 1], 'b': [0, 0, 1], 'c': [0, 2, 0]})
g = FSA(7, {2, 3, 6}, ('a', 'b', 'c'), {'a': [3, 5, 3, 5, 6, 4, 3], 'b': [6, 2, 1, 1, 6, 5, 1], 'c': [5, 0, 2, 2, 3, 4, 4]})
h = FSA(11, {0, 1, 5, 7, 9}, ('a', 'b', 'c'), {'a': [5, 6, 0, 4, 8, 6, 2, 8, 8, 4, 3], 'b': [1, 1, 4, 4, 1, 8, 10, 3, 5, 5, 4], 'c': [8, 5, 7, 7, 6, 7, 1, 7, 2, 2, 8]})

# Non-random FSA to check a specific thing in BFS
i = FSA(5, {3, 4}, ('a', 'b', 'c'), {'a': [1, 2, 2, 1, 2], 'b': [2, 4, 3, 2, 2], 'c': [3, 3, 4, 3, 3]})

# Randomly generated short words to be used for testing
u = ['a', 'a', 'b']
v = ['a', 'b', 'a', 'c', 'c', 'a']
w = ['b', 'a', 'b']

class TestBFS:
    def test_BFS_1(self):
        assert BFS(f) == FSA(1, {0}, ('a', 'b', 'c'), {'a': [0], 'b': [0], 'c': [0]})
    
    def test_BFS_2(self):
        assert BFS(g) == FSA(7, {1, 2, 5}, ('a', 'b', 'c'), {'a': [1, 3, 1, 6, 3, 1, 2], 'b': [2, 4, 4, 3, 5, 4, 2], 'c': [3, 5, 6, 6, 0, 5, 1]})

    def test_BFS_3(self):
        assert BFS(h) == FSA(10, {0, 1, 2, 5}, ('a', 'b', 'c'), {'a': [1, 4, 4, 3, 6, 3, 0, 8, 9, 3], 'b': [2, 3, 2, 1, 7, 8, 9, 9, 9, 2], 'c': [3, 5, 1, 6, 2, 5, 5, 3, 5, 4]})

    def test_BFS_4(self):
        assert BFS(i) == FSA(3, {2}, ('a', 'b', 'c'), {'a': [1, 1, 1], 'b': [1, 2, 1], 'c': [2, 2, 2]})

class TestUnion:
    def test_union_1(self):
        assert union(f, g) == FSA(1, {0}, ('a', 'b', 'c'), {'a': [0], 'b': [0], 'c': [0]})

    def test_union_2(self):
        assert union (g, g) == BFS(g)

    def test_union_3(self):
        # This took me an hour and a half to calculate by hand.
        assert union (g, h) == BFS(FSA(56, {0, 1, 2, 6, 7, 8, 9, 11, 14, 15, 17, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 34, 35, 36 ,37, 38, 39, 40, 43, 45, 46, 47, 48, 49, 50, 51, 54, 55}, ('a', 'b', 'c'), 
                                       {'a': [1, 4, 7, 10, 12,  3, 17, 19,  4, 23, 24, 28, 30, 32, 23,  7, 34,  3, 33, 40, 41,  7,  7, 27, 17,  3,  7, 43, 45, 24,  1, 17, 31, 10, 11, 10,  4, 34, 17, 17, 26, 52, 17,  9,  3, 34, 54,  4, 55, 28, 17, 27, 24, 27, 33,  3],
                                        'b': [2, 5, 8, 11, 13, 15, 18, 20, 21, 24, 26,  3, 31, 33,  2,  5, 31, 36, 38, 33, 38,  8, 24, 20, 36, 18,  5, 44, 46, 48,  8,  8, 31, 49,  8, 41, 50, 44,  8, 48,  2, 33, 26, 49, 21, 44, 44,  8, 44, 49, 36, 20,  2, 46, 44,  8],
                                        'c': [3, 6, 9, 12, 14, 16,  6, 21, 22, 25, 27, 29, 25, 10,  1,  6, 35, 37, 39, 29, 42, 15, 35, 14, 12,  6, 29,  6, 47, 25, 10, 28, 25, 28, 50, 29, 39,  6, 51, 35, 17, 29, 19, 10, 53, 29, 10, 15, 29,  9, 37, 21,  7, 49,  6, 51]}))

class TestIntersection:
    def test_intersection_1(self):
        assert intersection(f, g) == BFS(g)
    
    def test_intersection_2(self):
        assert intersection(g, g) == BFS(g)

    def test_intersection_3(self):
        # Yay for using essentially the same work twice!
        assert union (g, h) == BFS(FSA(56, {34, 30, 21, 47, 2, 15, 1, 26, 6, 25}, ('a', 'b', 'c'), 
                                       {'a': [1, 4, 7, 10, 12,  3, 17, 19,  4, 23, 24, 28, 30, 32, 23,  7, 34,  3, 33, 40, 41,  7,  7, 27, 17,  3,  7, 43, 45, 24,  1, 17, 31, 10, 11, 10,  4, 34, 17, 17, 26, 52, 17,  9,  3, 34, 54,  4, 55, 28, 17, 27, 24, 27, 33,  3],
                                        'b': [2, 5, 8, 11, 13, 15, 18, 20, 21, 24, 26,  3, 31, 33,  2,  5, 31, 36, 38, 33, 38,  8, 24, 20, 36, 18,  5, 44, 46, 48,  8,  8, 31, 49,  8, 41, 50, 44,  8, 48,  2, 33, 26, 49, 21, 44, 44,  8, 44, 49, 36, 20,  2, 46, 44,  8],
                                        'c': [3, 6, 9, 12, 14, 16,  6, 21, 22, 25, 27, 29, 25, 10,  1,  6, 35, 37, 39, 29, 42, 15, 35, 14, 12,  6, 29,  6, 47, 25, 10, 28, 25, 28, 50, 29, 39,  6, 51, 35, 17, 29, 19, 10, 53, 29, 10, 15, 29,  9, 37, 21,  7, 49,  6, 51]}))

class TestConcatenation:
    def def_concatenation_1(self):
        assert concatenation(f, f) == FSA(1, {0}, ('a', 'b', 'c'), {'a': [0], 'b': [0], 'c': [0]})

    def def_concatenation_2(self):
        assert concatenation(f, g) == BFS(FSA(20, {1, 2, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, ('a', 'b', 'c'),
                                              {'a': [1, 4, 1, 8, 10, 4, 8, 14, 15, 8, 17, 10, 14, 4, 15, 10, 10, 17, 17, 10],
                                               'b': [2, 5, 5, 9, 11, 13, 11, 9, 5, 11, 11, 19, 11, 13, 5, 11, 11, 11, 11, 19],
                                               'c': [3, 6, 7, 7, 12, 7, 12, 10, 16, 7, 18, 7, 18, 12, 18, 12, 12, 18, 18, 12]}))

    def def_concatenation_3(self):
        # This was a mistake. It's also the thing that has convinced me that concatenations are really expensive.
        # I'm writing this comment ~4 hours into making this FSA by hand, and I'm done with 168 states.
        # There are at most ~7000 states to handle. So I'm at least 2% of the way through!
        # Final count: 318 states in about 6 hours, including transferring everything to this code.
        assert concatenation(g, h) == BFS(FSA(318, {48, 165, 205, 276, 306, 75, 188, 115, 15, 80, 267, 278, 41, 207, 123,
                                                    5, 59, 157, 76, 184, 289, 265, 271, 284, 49, 151, 244, 168, 148, 290, 53, 42, 134, 227, 210, 101, 282, 229, 17, 38, 118, 136, 20, 65, 69,
                                                    14, 272, 259, 127, 119, 137, 105, 114, 187, 93, 47, 316, 74, 218, 66, 40, 250, 154, 116, 77, 208, 39, 18, 181, 170, 274, 90, 34, 103, 21, 6,
                                                    1, 27, 167, 314, 196, 248, 264, 225, 235, 299, 82, 177, 190, 24, 108, 311, 226, 217, 144, 162, 242, 139, 95, 286, 270, 277, 295, 211, 54, 237, 193, 142, 57, 146, 200, 138, 7, 33, 67, 87, 16, 35, 252, 78, 56,
                                                    301, 111, 185, 280, 266, 120, 206, 244, 32, 89, 204, 269, 73, 256, 145, 153, 164, 45, 230, 109, 161, 240, 288, 308, 254, 257, 293, 232, 198, 202, 104, 130, 171, 97, 241, 201, 222, 213, 147, 110, 143, 155, 12, 51,
                                                    231, 313, 275, 209, 52, 172, 194, 156, 107, 298, 212, 309, 224, 178, 249, 291, 307, 243, 305, 283, 160, 197, 255, 203, 141, 98, 163, 152, 281, 253, 68, 64, 117, 135, 183, 84, 100, 214, 129, 186, 180, 4, 19, 37, 58, 72, 88, 36,
                                                    2, 63, 86, 131, 294, 300, 234, 150, 216, 310, 247, 317, 176, 173, 297, 263, 304, 189, 25, 221, 195, 175, 303, 296, 246, 158, 233, 125, 169, 199, 251, 302, 261, 132, 262, 258, 96, 219, 260, 228, 79, 140, 215, 106, 94, 182, 292, 126, 91, 236, 81, 23, 174, 273, 166, 62, 85, 22, 159, 26},
                                                    ('a', 'b', 'c'),
                                                    {'a': [  1,   4,   7,   9,  10,  13,  16,  19,  22,   2,  25,   8,  22,  28,  33,  35,  37,  13,  16,  43,  46,  16,  16,  33,  52,   7,  54,  19,
                                                             2,  57,  58,  60,  62,  64,  67,  68,   8,  71,  46,  16,  67,  78,  46,  25,  83,  85,  50,  33,  35,  92,  22,  22,  97,  46, 100,  16,
                                                            58,  37, 102,  92, 106,   8, 108,  33, 111, 113,  67, 117, 120, 122, 124, 125, 128,  85,  67,  78, 133,  67, 135, 138, 139, 142,  37,  91,
                                                           102, 144, 146,  37, 149,  62,  67,  16,  50,  67,  67, 156, 146, 158, 102, 162,  71,  46, 125, 144,  22,  67,  16,  10, 172,  85,  85, 175,
                                                            83, 179,  67,  78,  67, 185, 113,  67, 175,   8, 191,  78,  22,  16, 193, 194, 195, 102,  22, 200, 138,  50,  46, 206, 122,  67,  37, 209,
                                                           211, 102, 214, 125, 194,  85, 117,  85, 220, 221,  67, 223, 149, 158, 226, 125, 222, 223, 108, 142,  10,  62, 231, 128, 233, 162, 237, 172,
                                                           238, 138, 226,  62, 239,  33,  67,  33, 193,  37, 102,  22, 128, 226,  67, 244, 223, 246, 128,  67,  78, 237,  37,  22,  83, 253, 254,  16,
                                                           194, 102, 125, 200, 117, 233, 125, 149, 158, 139, 246,  78, 144, 266, 113, 214, 268,  85,  71, 270,  67, 194, 226, 200,  50,  16, 233,  50,
                                                           102,  19, 275, 113, 277, 113,  85, 280,  85, 144, 277,  37, 142, 281, 179, 158, 233, 209, 102, 285, 174, 287,  67, 193, 194, 102, 226,
                                                           200, 135, 185, 233, 128,  85,  85, 211, 226, 295, 295, 211, 237, 194, 285, 296, 139, 125, 233, 214, 223,  67, 193,  67, 301, 139, 253, 139,
                                                           146, 303, 185, 113, 128, 285, 179, 156,  22, 233, 285, 238, 128, 193,  85, 200, 253, 226, 193, 206,  64, 295, 296, 295, 311, 193, 123, 139,
                                                           128, 233, 312, 193, 313, 125, 315, 313, 303,  67, 193],
                                                     'b': [  2,   5,   5,   3,  11,  14,  17,  20,  23,   2,  26,   4,  29,  31,   5,  22,  38,  40,  42,  44,  47,  49,  17,  20,  53,  53,  53,   5, 
                                                            55,  53,  59,  61,  63,  65,  38,  69,  70,  72,  74,  76,  17,  79,  40,  81,  84,  86,  88,  20,  91,  93,  94,  96,  98,  14, 101,   5,
                                                            59,  20,  58, 105, 106, 107,  69,   5, 112, 114,  49, 118, 121, 105,  61, 126, 129, 131,  38, 132,  93, 134, 136,  42, 140,  53,  59,  94,
                                                            98, 136,  53, 148, 121, 150, 151,  17, 152,  17,  20, 157, 101, 159, 160, 159, 163,  47, 166, 168, 169,   5,   5, 107, 101, 173, 174, 176,
                                                           178, 180,  20, 182, 184, 186, 187,  76, 189, 160, 192, 174,  63,  42, 101, 157, 126, 197, 199,  53,  42, 203,  75, 129,  93,  42,  38, 210,
                                                            42, 212, 134, 215, 134, 216,  65, 219, 114,  81,   5, 187, 224, 189, 227, 228, 197, 105, 229,  42,  98,  91, 229, 178, 234, 236, 101,  53,
                                                            93,  53, 118,  22, 163,  20,  38, 101,  53,  49,  98, 216, 242, 243,  38, 245, 187, 247, 249,  38, 251,  53,  17, 150, 224, 227, 255,  42,
                                                           157, 197, 258, 101, 118, 260, 261, 243, 176, 262, 263, 219, 265, 249,  93, 134, 224,  79, 255,  53,  20, 271, 168, 134, 203,  53, 273, 203,
                                                           107,  20, 227, 187, 101, 105, 279, 243, 182, 210,  53, 148,  42, 282, 283, 236, 140, 284, 160, 187, 173, 224, 134, 101,  76, 197, 289,
                                                           134, 290, 291, 292, 249, 294, 132,  53, 265, 134, 101,  42, 101,  42,  93, 297, 260, 189, 300, 101, 114, 184, 134, 148, 291, 302, 282, 273,
                                                           101, 304, 305, 114, 224, 105, 307,  42, 173, 262, 187, 105, 249, 134, 251, 101, 227, 227, 134, 309,  69,  53, 310, 134, 282,  42, 178, 292,
                                                           243, 302, 224, 134, 282, 263, 305, 229, 317, 151,  42],
                                                     'c': [  3,   6,   8,   9,  12,  15,  18,  21,  24,   1,  27,  28,  30,  32,  34,  36,  39,  41,  39,  45,  48,  39,  50,  51,  21,  51,   8,  34,
                                                            56,  51,  21,   8,   7,  66,  39,  40,  12,  73,  75,  39,  77,  36,  80,  82,  50,  87,  89,  90,  36,  41,  95,  95,  51,  99,  21, 102,
                                                            21, 103, 104,  41,  56,  10, 109, 110,  45, 115, 116, 119,  12, 123,  12, 127, 130, 857, 116,  36,  80,  39, 137, 130, 141, 102,  90,  95,
                                                           143, 145, 147,  21,  51,  87,  39,  71, 153, 154, 155,  21,  51,  82, 161, 141, 164, 165, 167, 119,  56, 170, 102, 171,  21, 108,  95, 177,
                                                            71,  73, 181, 183,  39,  73, 188, 116, 190,  43,  45, 183,  35, 130, 155,  90, 196, 198,  95, 201, 202, 204, 205, 104, 207, 116, 208, 119,
                                                           130, 213,  39,  82,  39, 217, 218,  95,  75,  82, 222,  75, 110, 225, 119, 196, 130,  80, 230,  50, 213,  56,  66, 232, 235, 141,  51,  90,
                                                           207, 155, 119,  56, 230, 147, 130,  51, 222, 116, 240, 241, 155, 119, 202,  12, 205, 248, 202, 250, 183, 110,  77, 252, 102, 119, 256, 202,
                                                            90, 257,  82, 155, 259, 196, 196, 147, 235, 141, 264, 183, 119, 130, 267, 208, 213,  56, 269,  51, 201,  21, 272, 130, 204, 155, 196, 204,
                                                            97, 274, 119, 276,  51, 278, 217,  51,  95, 256, 147,  90,  71,  66, 164,  82,  82,  66, 240, 188, 286, 143, 130, 201, 116, 288, 119,
                                                           202,  66, 269, 196, 293, 217,  56, 155, 272, 130, 155, 202, 147, 116, 267, 248, 298, 299, 235, 103, 205, 116, 130,  21, 256, 298, 218, 298,
                                                           147, 177, 164, 306, 222, 267, 269,  39, 162,  82, 276, 207, 308, 202,  95, 201, 259, 256, 293, 213,  74, 201, 248, 202, 230, 232, 254, 298,
                                                           201, 196, 241, 308,  66, 314, 230, 316, 177, 116, 254]}))
