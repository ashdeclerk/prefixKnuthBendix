from ..FSA.FSA import *

"""
This file tests FSA constructions, i.e.
- Unions
- Concatenations (note that this won't play nice with synchronous multi-tape FSAs)
- Intersections
- Kleene stars (not used in pKB)
- Products
- Projections
- FSAs accepting a single given word
- Complements
- Breadth-first-search normal forms for FSAs
- Quotients (not used in pKB)
- Strict quotients (not used in pKB)
- Substitutions (not used in pKB)
- Inverse homomorphisms (not used in pKB)
- Reversing FSAs (note that this won't play nice with synchronous multi-tape FSAs) (not used in pKB)
- Concatenation of a synchronous multi-tape FSA with a single word (this *does* work) (not used in pKB)
- FSA accepting the synchronous language {(uw, vw) | w in A*} for specific u, v
"""

# Randomly generated FSAs to used for testing
f = FSA(3, {0, 1}, ('a', 'b', 'c'), {'a': [0, 0, 1], 'b': [0, 0, 1], 'c': [0, 2, 0]})
g = FSA(7, {2, 3, 6}, ('a', 'b', 'c'), {'a': [3, 5, 3, 5, 6, 4, 3], 'b': [6, 2, 1, 1, 6, 5, 1], 'c': [5, 0, 2, 2, 3, 4, 4]})
h = FSA(11, {0, 1, 5, 7, 9}, ('a', 'b', 'c'), {'a': [5, 6, 0, 4, 8, 6, 2, 8, 8, 4, 3], 'b': [1, 1, 4, 4, 1, 8, 10, 3, 5, 5, 4], 'c': [8, 5, 7, 7, 6, 7, 1, 7, 2, 2, 8]})


# Randomly generated short words to be used for testing
u = ['a', 'a', 'b']
v = ['a', 'b', 'a', 'c', 'c', 'a']
w = ['b', 'a', 'b']

class TestBFS:
    def test_BFS_1(self):
        assert BFS(f) == FSA(1, {0}, ('a', 'b', 'c'), {'a': [0], 'b': [0], 'c': [0]})
    
    def test_BFS_2(self):
        assert BFS(g) == FSA(7, {1, 2, 5}, ('a', 'b', 'c'), {'a': [1, 3, 1, 6, 3, 1, 2], 'b': [2, 4, 4, 3, 5, 4, 2], 'c': [3, 5, 6, 6, 0, 5, 1]})

    def test_BFS_3(self):
        assert BFS(h) == FSA(10, {0, 1, 2, 5}, ('a', 'b', 'c'), {'a': [1, 4, 4, 3, 6, 3, 0, 8, 9, 3], 'b': [2, 3, 2, 1, 7, 8, 9, 9, 9, 2], 'c': [3, 5, 1, 6, 2, 5, 5, 3, 5, 4]})

    def test_BFS_4(self):
        # Non-random FSA to check a specific thing in BFS
        i = FSA(5, {3, 4}, ('a', 'b', 'c'), {'a': [1, 2, 2, 1, 2], 'b': [2, 4, 3, 2, 2], 'c': [3, 3, 4, 3, 3]})
        assert BFS(i) == FSA(3, {2}, ('a', 'b', 'c'), {'a': [1, 1, 1], 'b': [1, 2, 1], 'c': [2, 2, 2]})

class TestUnion:
    def test_union_1(self):
        assert union(f, g) == FSA(1, {0}, ('a', 'b', 'c'), {'a': [0], 'b': [0], 'c': [0]})

    def test_union_2(self):
        assert union (g, g) == BFS(g)

    def test_union_3(self):
        # This took me an hour and a half to calculate by hand.
        assert union (g, h) == BFS(FSA(56, {0, 1, 2, 6, 7, 8, 9, 11, 14, 15, 17, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 34, 35, 36 ,37, 38, 39, 40, 43, 45, 46, 47, 48, 49, 50, 51, 54, 55}, ('a', 'b', 'c'), 
                                       {'a': [1, 4, 7, 10, 12,  3, 17, 19,  4, 23, 24, 28, 30, 32, 23,  7, 34,  3, 33, 40, 41,  7,  7, 27, 17,  3,  7, 43, 45, 24,  1, 17, 31, 10, 11, 10,  4, 34, 17, 17, 26, 52, 17,  9,  3, 34, 54,  4, 55, 28, 17, 27, 24, 27, 33,  3],
                                        'b': [2, 5, 8, 11, 13, 15, 18, 20, 21, 24, 26,  3, 31, 33,  2,  5, 31, 36, 38, 33, 38,  8, 24, 20, 36, 18,  5, 44, 46, 48,  8,  8, 31, 49,  8, 41, 50, 44,  8, 48,  2, 33, 26, 49, 21, 44, 44,  8, 44, 49, 36, 20,  2, 46, 44,  8],
                                        'c': [3, 6, 9, 12, 14, 16,  6, 21, 22, 25, 27, 29, 25, 10,  1,  6, 35, 37, 39, 29, 42, 15, 35, 14, 12,  6, 29,  6, 47, 25, 10, 28, 25, 28, 50, 29, 39,  6, 51, 35, 17, 29, 19, 10, 53, 29, 10, 15, 29,  9, 37, 21,  7, 49,  6, 51]}))

class TestIntersection:
    def test_intersection_1(self):
        assert intersection(f, g) == BFS(g)
    
    def test_intersection_2(self):
        assert intersection(g, g) == BFS(g)

    def test_intersection_3(self):
        # Yay for using essentially the same work twice!
        assert union (g, h) == BFS(FSA(56, {34, 30, 21, 47, 2, 15, 1, 26, 6, 25}, ('a', 'b', 'c'), 
                                       {'a': [1, 4, 7, 10, 12,  3, 17, 19,  4, 23, 24, 28, 30, 32, 23,  7, 34,  3, 33, 40, 41,  7,  7, 27, 17,  3,  7, 43, 45, 24,  1, 17, 31, 10, 11, 10,  4, 34, 17, 17, 26, 52, 17,  9,  3, 34, 54,  4, 55, 28, 17, 27, 24, 27, 33,  3],
                                        'b': [2, 5, 8, 11, 13, 15, 18, 20, 21, 24, 26,  3, 31, 33,  2,  5, 31, 36, 38, 33, 38,  8, 24, 20, 36, 18,  5, 44, 46, 48,  8,  8, 31, 49,  8, 41, 50, 44,  8, 48,  2, 33, 26, 49, 21, 44, 44,  8, 44, 49, 36, 20,  2, 46, 44,  8],
                                        'c': [3, 6, 9, 12, 14, 16,  6, 21, 22, 25, 27, 29, 25, 10,  1,  6, 35, 37, 39, 29, 42, 15, 35, 14, 12,  6, 29,  6, 47, 25, 10, 28, 25, 28, 50, 29, 39,  6, 51, 35, 17, 29, 19, 10, 53, 29, 10, 15, 29,  9, 37, 21,  7, 49,  6, 51]}))

class TestConcatenation:
    def test_concatenation_1(self):
        assert concatenation(f, f) == FSA(1, {0}, ('a', 'b', 'c'), {'a': [0], 'b': [0], 'c': [0]})

    def test_concatenation_2(self):
        assert concatenation(f, g) == BFS(FSA(20, {1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, ('a', 'b', 'c'),
                                              {'a': [ 1,  4,  1,  8, 10,  4,  8, 14, 15,  8, 17, 10, 14, 18, 15, 10, 10, 17, 17, 10],
                                               'b': [ 2,  5,  5,  9, 11, 13, 11,  9,  5, 11, 11, 19, 11, 13,  5, 11, 11, 11, 11, 19],
                                               'c': [ 3,  6,  7,  7, 12,  7, 12, 10, 16,  7, 18,  7, 18, 12, 18, 12, 12, 18, 18, 12]}))

    def test_concatenation_3(self):
        # This was a mistake. It's also the thing that has convinced me that concatenations are really expensive.
        # I've tried doing this by hand twice, and both times something went horribly wrong.
        # But the third time (when I checked against my code's output every few states) worked out, so yay for that.
        # If I ever have to do another concatenation by hand I will scream.
        assert concatenation(g, h) == BFS(FSA(312, {48, 163, 202, 270, 300, 74, 186, 113, 15, 98, 79, 262, 272, 41, 204, 121, 5, 58, 155, 75, 182, 283, 260, 266, 278, 49, 149, 238, 166, 146, 284, 53, 42, 132, 222, 207, 100, 276, 224, 17, 38, 116, 134, 20, 64, 68, 14, 267, 254, 117, 135, 104, 112, 185, 92, 47, 310, 73, 215, 65, 40, 245, 152, 114, 76, 205, 39, 18, 179, 168, 89, 34, 102, 21, 6, 1, 27, 165, 308, 125, 243, 259, 220, 230, 293, 81, 175, 188, 24, 106, 305, 221, 214, 142, 160, 236, 137, 94, 280, 265, 271, 289, 208, 54, 232, 191, 140, 56, 144, 197, 136, 7, 33, 66, 86, 16, 35, 247, 77, 30, 309, 295, 109, 183, 274, 261, 118, 203, 239, 32, 88, 201, 264, 72, 251, 143, 151, 162, 45, 225, 107, 159, 234, 282, 302, 249, 252, 287, 227, 195, 199, 103, 128, 169, 96, 235, 198, 218, 210, 145, 108, 141, 153, 12, 51, 226, 307, 269, 206, 52, 170, 192, 154, 105, 292, 209, 303, 219, 176, 244, 285, 301, 237, 299, 277, 158, 194, 250, 200, 139, 97, 161, 150, 275, 248, 67, 63, 115, 133, 181, 83, 99, 211, 127, 184, 178, 4, 19, 37, 57, 71, 87, 36, 2, 62, 85, 129, 288, 294, 273, 229, 148, 213, 304, 242, 311, 174, 171, 291, 258, 298, 187, 25, 217, 193, 173, 297, 290, 241, 156, 228, 123, 29, 167, 196, 246, 296, 256, 130, 257, 253, 95, 216, 255, 223, 78, 138, 212, 55, 93, 180, 286, 124, 90, 231, 80, 23, 172, 268, 164, 61, 84, 22, 157, 26},
                                                    ('a', 'b', 'c'),
                                                    {'a': [1, 4, 7, 9, 10, 13, 16, 19, 22, 2, 25, 8, 22, 28, 33, 35, 37, 13, 16, 43, 46, 16, 16, 33, 52, 7, 54, 19, 2, 56, 57, 59, 61, 63, 66, 67, 8, 70, 46, 16, 66, 77, 46, 25, 82, 84, 50, 33, 35, 91, 22, 22, 96, 46, 99, 16, 37, 101, 91, 55, 8, 106, 33, 109, 111, 66, 115, 118, 120, 122, 123, 126, 84, 66, 77, 131, 66, 133, 136, 137, 140, 37, 90, 101, 142, 144, 37, 147, 61, 66, 16, 50, 66, 66, 154, 144, 156, 101, 160, 70, 46, 123, 142, 22, 66, 10, 170, 84, 84, 173, 82, 177, 66, 77, 66, 183, 111, 66, 173, 8, 189, 77, 22, 16, 191, 192, 193, 101, 22, 197, 136, 50, 46, 203, 120, 66, 37, 206, 208, 101, 211, 123, 192, 84, 115, 84, 131, 217, 66, 131, 147, 156, 221, 123, 218, 131, 106, 140, 10, 61, 226, 126, 228, 160, 232, 170, 233, 136, 221, 61, 234, 33, 66, 33, 191, 37, 101, 22, 126, 221, 66, 239, 131, 241, 126, 66, 77, 232, 37, 22, 82, 248, 249, 16, 101, 123, 197, 115, 228, 123, 147, 156, 137, 241, 77, 142, 261, 111, 211, 263, 84, 70, 265, 66, 192, 221, 197, 16, 228, 101, 19, 269, 111, 271, 111, 84, 274, 84, 142, 271, 37, 140, 275, 177, 156, 228, 206, 101, 279, 172, 281, 66, 191, 192, 101, 221, 197, 133, 183, 228, 126, 84, 84, 208, 221, 289, 289, 208, 232, 192, 279, 290, 137, 123, 228, 211, 131, 66, 191, 295, 137, 248, 137, 144, 297, 183, 111, 126, 279, 177, 154, 22, 228, 279, 233, 126, 191, 84, 197, 248, 221, 191, 203, 63, 289, 290, 289, 305, 191, 126, 137, 126, 228, 306, 191, 307, 123, 309, 307, 297, 66, 191],
                                                     'b': [2, 5, 5, 3, 11, 14, 17, 20, 23, 2, 26, 4, 29, 31, 5, 22, 38, 40, 42, 44, 47, 49, 17, 20, 53, 53, 53, 5, 55, 53, 58, 60, 62, 64, 38, 68, 69, 71, 73, 75, 17, 78, 40, 80, 83, 85, 87, 20, 90, 92, 93, 95, 97, 14, 100, 5, 20, 57, 104, 55, 105, 68, 5, 110, 112, 49, 116, 119, 104, 60, 124, 127, 129, 38, 130, 92, 132, 134, 42, 138, 53, 58, 93, 97, 134, 53, 146, 119, 148, 149, 17, 150, 17, 20, 155, 100, 157, 158, 157, 161, 47, 164, 166, 167, 5, 105, 100, 171, 172, 174, 176, 178, 20, 180, 182, 184, 185, 75, 187, 158, 190, 172, 62, 42, 100, 155, 124, 194, 196, 53, 42, 200, 73, 127, 92, 42, 38, 207, 42, 209, 132, 212, 132, 213, 64, 216, 112, 80, 5, 185, 219, 187, 222, 223, 194, 104, 224, 42, 97, 90, 224, 176, 229, 231, 100, 53, 92, 53, 116, 22, 161, 20, 38, 100, 53, 49, 97, 213, 237, 238, 38, 240, 185, 242, 244, 38, 246, 53, 17, 148, 219, 222, 250, 42, 194, 253, 100, 116, 255, 256, 237, 174, 257, 258, 216, 260, 244, 92, 132, 219, 78, 250, 53, 20, 266, 166, 132, 53, 268, 105, 20, 222, 185, 100, 104, 273, 237, 180, 207, 53, 146, 42, 276, 277, 231, 138, 278, 158, 185, 171, 219, 132, 100, 75, 194, 283, 132, 284, 285, 286, 244, 288, 130, 53, 260, 132, 100, 42, 100, 42, 92, 291, 255, 187, 294, 100, 112, 182, 132, 285, 296, 276, 268, 100, 298, 299, 112, 219, 104, 301, 42, 171, 257, 185, 104, 244, 132, 246, 100, 222, 222, 132, 303, 68, 53, 304, 132, 276, 42, 176, 286, 237, 296, 219, 132, 276, 258, 299, 224, 311, 149, 42],
                                                     'c': [3, 6, 8, 9, 12, 15, 18, 21, 24, 1, 27, 28, 30, 32, 34, 36, 39, 41, 39, 45, 48, 39, 50, 51, 21, 51, 8, 34, 30, 51, 21, 8, 7, 65, 39, 40, 12, 72, 74, 39, 76, 36, 79, 81, 50, 86, 88, 89, 36, 41, 94, 94, 51, 98, 21, 101, 102, 103, 41, 30, 10, 107, 108, 45, 113, 114, 117, 12, 121, 12, 125, 128, 86, 114, 36, 79, 39, 135, 128, 139, 101, 89, 94, 141, 143, 145, 21, 51, 86, 39, 70, 151, 152, 153, 21, 51, 81, 159, 139, 162, 163, 165, 117, 30, 168, 169, 21, 106, 94, 175, 70, 72, 179, 181, 39, 72, 186, 114, 188, 43, 45, 181, 35, 128, 153, 89, 125, 195, 94, 198, 199, 201, 202, 103, 204, 114, 205, 117, 128, 210, 39, 81, 39, 214, 215, 94, 74, 81, 218, 74, 108, 220, 117, 125, 128, 79, 225, 50, 210, 30, 65, 227, 230, 139, 51, 89, 204, 153, 117, 30, 225, 145, 128, 51, 218, 114, 235, 236, 153, 117, 199, 12, 202, 243, 199, 245, 181, 108, 76, 247, 101, 117, 251, 199, 252, 81, 153, 254, 125, 125, 145, 230, 139, 259, 181, 117, 128, 262, 205, 210, 30, 264, 51, 198, 21, 267, 128, 153, 125, 96, 89, 117, 270, 51, 272, 214, 51, 94, 251, 145, 89, 70, 65, 162, 81, 81, 65, 234, 186, 280, 141, 128, 198, 114, 282, 117, 199, 65, 264, 125, 287, 214, 30, 153, 267, 128, 153, 199, 145, 114, 262, 243, 292, 293, 230, 102, 202, 114, 128, 251, 292, 215, 292, 145, 175, 162, 300, 218, 262, 264, 39, 160, 81, 270, 204, 302, 199, 94, 198, 254, 251, 287, 210, 73, 198, 243, 199, 225, 227, 249, 292, 198, 125, 235, 302, 65, 308, 225, 310, 175, 114, 249]}))

class TestStar:
    def test_star_1(self):
        assert star(f) == FSA(1, {0}, ('a', 'b', 'c'), {'a': [0], 'b': [0], 'c': [0]})

    def test_star_2(self):
        assert star(g) == BFS(FSA(24, {0, 1, 2, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23}, ('a', 'b', 'c'),
                              {'a': [ 1,  4,  1,  8,  9,  4, 14, 15,  2, 17,  9, 20,  4, 20, 21, 23, 14, 17, 17,  9, 21,  9,  9,  4],
                               'b': [ 2,  5,  5,  3, 10, 12, 10, 16,  2, 10, 19, 10, 12, 16,  5,  5, 10, 10, 10, 19,  5, 10, 10,  5],
                               'c': [ 3,  6,  7,  8, 11, 13, 11, 14,  1, 18, 13, 18, 11,  9, 22,  9,  7, 18, 18, 11, 18, 11, 11, 11]}))

    def test_star_3(self):
        assert star(h) == BFS(FSA(53, {0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52},
                                  ('a', 'b', 'c'),
                                  {'a': [1, 4, 4, 3, 9, 12, 7, 12, 0, 9, 21, 12, 24, 4, 12, 29, 7, 12, 3, 7, 21, 34, 12, 12, 24, 21, 12, 12, 40, 24, 12, 40, 8, 29, 24, 21, 24, 40, 12, 40, 24, 24, 24, 49, 12, 24, 51, 52, 12, 18, 51, 34, 34],
                                   'b': [2, 5, 2, 1, 10, 13, 15, 17, 18, 20, 22, 15, 25, 5, 28, 30, 31, 17, 2, 33, 22, 35, 5, 37, 35, 38, 31, 39, 22, 10, 13, 30, 43, 44, 35, 38, 46, 38, 17, 38, 25, 46, 47, 18, 2, 50, 38, 30, 37, 18, 30, 35, 20],
                                   'c': [3, 6, 7, 8, 11, 14, 16, 16, 19, 11, 14, 23, 26, 27, 6, 27, 16, 23, 32, 6, 24, 26, 36, 16, 26, 23, 23, 16, 41, 42, 24, 36, 2, 27, 45, 41, 26, 41, 41, 23, 45, 26, 48, 3, 12, 48, 23, 27, 23, 19, 36, 45, 42]}))
            
class TestQuotient:
    def test_quotient_1(self):
        assert quotient(g, f) == FSA(1, {0}, ('a', 'b', 'c'), {'a': [0], 'b': [0], 'c': [0]})
    
    def test_quotient_2(self):
        # It turns out the randomly generated FSAs are kinda useless for testing quotients.
        # This example comes from Hopcroft and Ullman.
        i = FSA(3, {1}, ('a', 'b'), {'a': [0, 1, 2], 'b': [1, 2, 2]})
        j = FSA(4, {2}, ('a', 'b'), {'a': [3, 1, 3, 3], 'b': [1, 2, 3, 3]})
        assert quotient(i, j) == FSA(1, set(), ('a', 'b'), {'a': [0], 'b': [0]})

    def test_quotient_3(self):
        # Sadly, Hopcroft and Ullman only have the one example, so here's an example
        # that's more like what we see in pKB.
        good_suffix = FSA(4, {2}, ('a', 'b'), {'a': [1, 3, 3, 3], 'b': [3, 2, 3, 3]})
        all_prefixes = FSA(3, {0}, ('a', 'b'), {'a': [1, 2, 0], 'b': [0, 1, 2]})
        assert quotient(all_prefixes, good_suffix) == BFS(FSA(3, {2}, ('a', 'b'), {'a': [1, 2, 0], 'b': [0, 1, 2]}))

class TestStrictQuotient:
    # I'm calling this out here, just for my own sanity:
    # Strict quotients aren't really documented in Hopcroft and Ullman, or 
    # any of the other sources I've perused as far as I can tell, but they
    # are a very reasonable construction to consider.
    # The strict quotient L1 // L2 (using integer division notation for lack of
    # defined notation here) is {x | xy is in L1 for all y in L2}.
    # The standard quotient only requires existence of some y with the appropriate
    # property.
    # This isn't actually used in pKB, but I have it in the FSA module, so...
    def test_strict_quotient_1(self):
        pass